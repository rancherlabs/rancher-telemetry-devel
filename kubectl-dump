#!/bin/bash

if [ "$#" -ne 1 ]; then
  echo "Usage: $0 <namespace>"
  exit 1
fi

NAMESPACE="$1"
DATE=$(date '+%Y-%m-%d_%H-%M-%S')
DUMP_DIR="kubectl-dump-${NAMESPACE}-${DATE}"
OUTPUT_FORMAT="${K8S_DEBUG_OUTPUT_FORMAT:-yaml}"

mkdir -p "${DUMP_DIR}"

declare -a resources=("pods" "services" "deployments" "replicasets" "configmaps" "secrets")

function dump_resource() {
  local resource="$1"
  local objects="$(kubectl get "${resource}" \
    --namespace="${NAMESPACE}" \
    -o jsonpath='{.items[*].metadata.name}')"

  kubectl get "${resource}" --namespace="${NAMESPACE}" | \
    tee "${DUMP_DIR}/${resource}.get.txt"

  for object in ${objects}; do
    # Describe the resource in txt format and print it
    kubectl describe "${resource}" "${object}" \
      --namespace="${NAMESPACE}" | tee \
        "${DUMP_DIR}/${resource}.${object}.describe.txt"
    
    # Describe the resource in the specified output format and save it
    kubectl describe "${resource}" "${object}" \
      --namespace="${NAMESPACE}" \
      -o "${OUTPUT_FORMAT}" | tee \
        "${DUMP_DIR}/${resource}.${object}.describe.${OUTPUT_FORMAT}"
  done
}

function collect_logs() {
  local resource="$1"
  local objects="$(kubectl get "${resource}" \
    --namespace="${NAMESPACE}" \
    -o jsonpath='{.items[*].metadata.name}')"

  for object in ${objects}; do
    LOG_DIR="${DUMP_DIR}/logs/${object}"
    mkdir -p "${LOG_DIR}"
    CONTAINERS=$(kubectl get "${resource}" "${object}" --namespace="${NAMESPACE}" -o jsonpath='{.spec.containers[*].name}')
    for CONTAINER in ${CONTAINERS}; do
      kubectl logs --namespace="${NAMESPACE}" "${object}" -c "${CONTAINER}" > "${LOG_DIR}/${CONTAINER}.log"
    done
  done
}


function main() {
  echo "Retrieving information about Kubernetes resources in namespace '${NAMESPACE}'..."
  for resource in "${resources[@]}"; do
    dump_resource "${resource}"
  done

  echo "Collecting logs from all pods in namespace '${NAMESPACE}'..."
  collect_logs "pods"

  echo "All information collected and saved to '${DUMP_DIR}'."
}

# If script is sourced, don't call main
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main
fi
