#!/bin/bash

: "${HOST_NAME:=rancher}"
: "${CLUSTER_NAME:=telemetry}"
: "${K3S_VERSION:=rancher/k3s:v1.23.6-k3s1}"
# : "${TELEMETRY_IMAGE:=rancher/telemetry:v0.6.1}"

function setup-volume() {
  if [ ! -d /var/lib/postgresql/data ]; then
    if ! mkdir -p /var/lib/postgresql/data; then
      sudo mkdir -p /var/lib/postgresql/data
    fi
  fi
  if [ ! -d /var/lib/postgresql/docker-entrypoint-initdb.d ]; then
    if ! mkdir -p /var/lib/postgresql/docker-entrypoint-initdb.d; then
      sudo mkdir -p /var/lib/postgresql/docker-entrypoint-initdb.d
    fi
  fi
  echo "CREATE ROLE telemetry WITH PASSWORD 'telemetry';" | sudo tee \
    /var/lib/postgresql/docker-entrypoint-initdb.d/000-init.sql
}

function k3d-create() {
  local create_command="k3d cluster create ${CLUSTER_NAME} --agents 1 --servers 1"
  create_command="$create_command --image ${K3S_VERSION}"
  create_command="$create_command --volume /var/lib/postgresql:/var/lib/postgresql"
  while ! $create_command; do
    k3d cluster delete "${CLUSTER_NAME}"
  done
}

function install-rancher() {
  echo "Installing cert-manager"
  helm repo add jetstack https://charts.jetstack.io
  kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.5.1/cert-manager.crds.yaml
  helm install cert-manager jetstack/cert-manager \
    --namespace cert-manager \
    --create-namespace \
    --version v1.5.1 \
    --atomic
  kubectl wait --namespace cert-manager --for=condition=ready pod --all --timeout=30s

  echo "Installing Rancher..."
  helm repo add rancher-stable https://releases.rancher.com/server-charts/stable
  kubectl create namespace cattle-system
  helm install rancher rancher-stable/rancher \
    --set bootstrapPassword=admin \
    --namespace cattle-system \
    --set hostname="${HOST_NAME}" \
    --set replicas=1 \
    --atomic
}

function configure-hostnames() {
  # Get the IP address of one of the nodes.
  local addr
  addr=$(
    k3d node list -o json |
      jq -r "[ .[] | select(.name | contains(\"telemetry\")) | .IP.IP ][0]"
  )
  # Do a backup once, but don't ever overwrite it.
  if [ ! -f /etc/hosts.bak ]; then
    sudo cp -a /etc/hosts /etc/hosts.bak
  fi
  sudo sed -n -e "/ ${HOST_NAME}/!p" -i /etc/hosts
  echo "${addr} ${HOST_NAME}" | sudo tee -a /etc/hosts >/dev/null
}

# Get login token, good for 1 minute.
function get-login-token() {
  if [ -z "$1" ]; then
    echo >&2 "error: argument missing: password"
    return
  fi

  local password
  local login_token

  password="$1"
  login_token=$(
    curl -k -s -X POST \
      "https://${HOST_NAME}/v3-public/localProviders/local?action=login" \
      -H 'content-type: application/json' \
      --data-binary "{\"username\":\"admin\",\"password\":\"$password\"}" |
      jq -r .token
  )

  if [ "$?" -ne 0 ]; then
    echo >&2 "Login token could not be acquired"
    return 1
  fi

  echo "${login_token}"
}

function change-password() {
  local token
  if [ -z "$1" ]; then
    echo >&2 "The first argument must be an API token"
    return 1
  fi
  token="$1"

  # Change password
  curl -k -s -X POST \
    "https://${HOST_NAME}/v3/users?action=changepassword" \
    -H 'Content-Type: application/json' \
    -H "Authorization: Bearer $token" \
    --data-binary '{"currentPassword":"admin","newPassword":"dev-admin-pw"}'
}

# Create API key, good forever.
function create-api-key() {
  local login_token
  if [ -z "$1" ]; then
    echo >&2 "error: argument missing: token"
    return 1
  else
    login_token="$1"
  fi

  local api_key
  api_key=$(
    curl -k -s \
      -X POST \
      "https://${HOST_NAME}/v3/token" \
      -H 'Content-Type: application/json' \
      -H "Authorization: Bearer $login_token" \
      --data-binary '{"type":"token", "description": "for scripts and stuff"}' |
      jq -r .token
  )

  if [ "$?" -ne 0 ]; then
    echo >&2 "API key could not be acquired"
    return 1
  fi

  echo "${api_key}"
}

# Set server-url
function change-server-url() {
  local api_key
  if [ -z "$1" ]; then
    echo >&2 "The first argument must be an API token"
    return 1
  else
    api_key="$1"
  fi
  curl -k -s \
    "https://${HOST_NAME}/v3/settings/server-url" \
    -H 'Content-Type: application/json' \
    -H "Authorization: Bearer $api_key" \
    -X PUT \
    --data-binary "{\"name\":\"server-url\",\"value\":\"https://${HOST_NAME}/\"}"

  if [ "$?" -ne "0" ]; then
    echo >&2 "Changing server URL failed"
  fi
}

function install-postgres() {
  files=(
    manifests/namespace.yaml
    manifests/postgres/config.yaml
    manifests/postgres/deployment.yaml
    manifests/postgres/service.yaml
  )
  for f in "${files[@]}"; do
    if ! kubectl apply --wait -f "$f"; then
      echo >&2 "error: install-postgres: kubectl apply failed"
      return 1
    fi
  done
}

function install-influx() {
  kubectl apply -f manifests/namespace.yaml
  helm repo add influxdata https://helm.influxdata.com
  helm upgrade -n telemetry -i influxdb --version 4.12.0 influxdata/influxdb
}

function create-secret {
  if [ -z "$1" ]; then
    echo >&2 "error: argument missing: api-key"
    return 1
  fi

  local api_key="$1"

  cat <<EOF >secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: telemetry
  namespace: telemetry
stringData:
  api-key: $api_key
EOF

  kubectl create namespace telemetry || true
  kubectl apply -f secret.yaml
}

function install-telemetry-server() {
  kubectl -n telemetry install manifests/telemetry-server
}

function install-telemetry-client() {
  kubectl -n telemetry install manifests/telemetry-client
}

function install-base() {
  setup-volume
  k3d-create
  install-rancher
  configure-hostnames
}

function init-base() {
  local api_key
  api_key=$(create-api-key "$(get-login-token admin)")
  change-server-url "$api_key"
  change-password "$api_key" # Required to skip the setup screen
  create-secret "$api_key"
}

function start() {
  install-base
  install-postgres
  install-influx
}

# Only run start if script wasn't sourced.
if ! (return 0 2>/dev/null); then
  start
fi
